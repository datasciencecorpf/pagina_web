{"version":3,"file":"static/js/489.29002702.chunk.js","mappings":"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","sources":["components/Ajuste.jsx","components/DialogConf.jsx","components/BOTS/BotAgriFerAjuste.jsx","components/CircularLoading.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './css/ReadGranjas.css';\r\n\r\nconst ReadGranjas = ({ onGranjaSelect, jsonData }) => {\r\n  const [selectedGranja, setSelectedGranja] = useState('');\r\n  const [uniqueGranjas, setUniqueGranjas] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const granjas = Array.from(new Set(jsonData.map((item) => item.Granja)));\r\n    setUniqueGranjas(granjas);\r\n  }, [jsonData]);\r\n\r\n  const handleGranjaChange = (event) => {\r\n    const selectedValue = event.target.value;\r\n    setSelectedGranja(selectedValue);\r\n    onGranjaSelect(selectedValue);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <label htmlFor=\"granja\">Granja: </label>\r\n      <select className=\"granja\" value={selectedGranja} onChange={handleGranjaChange}>\r\n        <option value=\"\">Seleccione una granja</option>\r\n        {uniqueGranjas.map((granja, index) => (\r\n          <option key={index} value={granja}>\r\n            {granja}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReadGranjas;\r\n","import React from 'react'\r\nimport { Modal, Button } from 'react-bootstrap'\r\nimport './css/Dialog.css'\r\nfunction ModalDialog({ show, handleClose, handleSave, conversionReal,conversionRealAjustada,conversionEstimada,conversionEstimadaAjustada }) {\r\n  \r\n  return (\r\n   \r\n\r\n    <Modal className='Dialog' show={show} onHide={handleClose} centered>\r\n    <div className=\"Dialog-content\">\r\n      <Modal.Header closeButton>\r\n        <Modal.Title className=\"Dialog-title\">Confirmar Ajuste</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <p>El valor de la conversión estimada es <b>{conversionEstimada}</b> y ajustada <b>{conversionEstimadaAjustada}</b></p> \r\n        <p>El valor de la conversión real es <b>{conversionReal}</b> y ajustada <b> {conversionRealAjustada}</b></p> \r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"danger\" onClick={handleClose}>\r\n          Cancelar\r\n        </Button>\r\n        <Button variant=\"dark\" onClick={handleSave}>\r\n          Guardar\r\n        </Button>\r\n      </Modal.Footer>\r\n    </div>\r\n  </Modal>\r\n  \r\n  \r\n    )\r\n}\r\nexport default ModalDialog","import { Navigate } from \"react-router-dom\";\r\nimport { UserContext } from \"../../context/UserContext\";\r\nimport React, { useEffect, useState, useContext, useRef } from \"react\";\r\nimport Navbar from \"../NavBar\";\r\nimport CircularLoading from \"../CircularLoading\";\r\nimport jsonData from '../FarmAjuste/data_farm.json';\r\nimport ReadGranjas from \"../Ajuste\";\r\nimport '../css/TablaAjuste.css'\r\nimport ModalDialog from '../DialogConf'\r\nimport ErrorMessage from \"../ErrorMessage\";\r\n\r\n\r\n\r\nconst BotAgriFerAjuste = ({ title }) => {\r\n    const [token, setToken] = useContext(UserContext);\r\n    const [username, setUserName] = useState(null);\r\n    const [secondName, setUserSecondName] = useState(null);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n    const [errorMessageDespacho, setErrorMessageDespacho] = useState(\"\");\r\n    const [errorMessageAvesIniciales, setErrorMessageAvesIniciales] = useState(\"\");\r\n    const [errorMessageConsumo, setErrorMessageConsumo] = useState(\"\");\r\n    const [errorMessagePesoBascula, setErrorMessagePesoBascula] = useState(\"\");\r\n    const [selectedGranja, setSelectedGranja] = useState('');\r\n    const [selectedLotes, setSelectedLotes] = useState([]);\r\n    const [selectedLote, setSelectedLote] = useState('');\r\n    const [selectedLoteData, setLoteData] = useState('');\r\n    const [avesInicialValue, setAvesInicialValue] = useState('');\r\n    const [totalConsumoValue, setTotalConsumoValue] = useState('');\r\n    const [pesoBasculaValue, setpesoBasculaValue] = useState('');\r\n    const [muertesValue, setMuertesValue] = useState('');\r\n    const [despachosValue, setDespachosValue] = useState('');\r\n    const [liquidacionValue, setLiquidacionValue] = useState('');\r\n    const [selectedLotesList, setSelectedLotesList] = useState([]);\r\n    const [inactivityTime, setInactivityTime] = useState(0);\r\n    const [loading, setLoading] = useState(true);\r\n    const [showModal, setShowModal] = useState(false);\r\n    const errorMessageRefDespacho = useRef(null);\r\n    const errorMessageRef = useRef(null);\r\n    const inactivityTimeoutRef = useRef(null);\r\n\r\n    const handleOpenModal = () => {\r\n        setShowModal(true);\r\n        setLiquidacionValue('YES');\r\n        const inventario = handleInventarioChange(); // Obtener el valor del inventario\r\n        if (inventario < 0) {\r\n            setShowModal(false);\r\n            // Mostrar mensaje de error y retornar\r\n            setErrorMessage(\"No se permiten valores negativos en el inventario.\");\r\n            errorMessageRef.current.show();\r\n            return;\r\n        }\r\n\r\n\r\n\r\n\r\n    };\r\n\r\n    const handleCloseModal = () => {\r\n        setShowModal(false);\r\n        setLiquidacionValue('NO');\r\n    };\r\n\r\n    const handleSaveModal = () => {\r\n        // Realizar acciones al almacenar el modal\r\n        setShowModal(false);\r\n        const jsonEstimado = {\r\n            Lote: selectedLoteData.Lote,\r\n            Granja: selectedLoteData.Granja,\r\n            AvesInicial: selectedLoteData.AvesInicial,\r\n            TotalConsumo: selectedLoteData.TotalConsumo,\r\n            Muertes: selectedLoteData.MUERTES,\r\n            DespachoAves: selectedLoteData.Despachos,\r\n            InventarioAves: selectedLoteData.Inventario,\r\n            PesoBascula: selectedLoteData.PesoBascula,\r\n            Liquidacion: liquidacionValue\r\n        };\r\n        const jsonAjuste = {\r\n            Lote: selectedLote,\r\n            Granja: selectedGranja,\r\n            AvesInicial: parseFloat(avesInicialValue),\r\n            TotalConsumo: parseFloat(totalConsumoValue),\r\n            Muertes: parseFloat(muertesValue),\r\n            DespachoAves: parseFloat(despachosValue),\r\n            InventarioAves: parseFloat(handleInventarioChange()),\r\n            PesoBascula: parseFloat(pesoBasculaValue),\r\n            Liquidacion: liquidacionValue\r\n        };\r\n\r\n        const jsonFinal = {\r\n            Estimado: jsonEstimado,\r\n            Real: jsonAjuste,\r\n            Responsable: username + \" \"+ secondName,\r\n        }\r\n\r\n\r\n        executeproject(\"-i insertar\", JSON.stringify(jsonFinal).replace(/\"/g, \"'\"));\r\n\r\n        setSelectedLotesList((prevList) => [...prevList, selectedLote]);\r\n        // Limpiar los valores de los inputs\r\n        setAvesInicialValue('');\r\n        setTotalConsumoValue('');\r\n        setMuertesValue('');\r\n        setDespachosValue('');\r\n        setpesoBasculaValue('');\r\n        setLiquidacionValue('');\r\n\r\n        setLoteData('');\r\n    };\r\n\r\n    const handleGranjaSelect = (granja) => {\r\n        // Realiza las operaciones necesarias con el valor seleccionado\r\n        setSelectedGranja(granja);\r\n        // Filtrar el JSON por la granja seleccionada\r\n        const granjaData = jsonData.filter((item) => item.Granja === granja);\r\n        // Realizar las operaciones con los datos filtrados\r\n\r\n        // Filtrar los lotes que ya están seleccionados\r\n        const availableLotes = granjaData.filter((item) => !selectedLotesList.includes(item.Lote));\r\n\r\n        const lotes = availableLotes.map((item) => item.Lote);\r\n        setSelectedLotes(lotes);\r\n        // ...\r\n    };\r\n    const handleInventarioChange = () => {\r\n        // Calcula el valor para el Inventario basado en la fórmula\r\n        const avesInicial = parseFloat(avesInicialValue) || 0;\r\n        const muertes = parseFloat(muertesValue) || 0;\r\n        const despachos = parseFloat(despachosValue) || 0;\r\n        const inventario = avesInicial - muertes - despachos;\r\n        return inventario; // Devuelve el valor calculado del inventario\r\n    };\r\n    const handleLoteSelect = (lote) => {\r\n        setSelectedLote(lote);\r\n        const granjaLote = jsonData.filter((item) => item.Lote === lote);\r\n        // setLoteData(granjaLote);\r\n        setLoteData(granjaLote.length > 0 ? granjaLote[0] : null);\r\n        setAvesInicialValue('');\r\n        setTotalConsumoValue('');\r\n        setMuertesValue('');\r\n        setDespachosValue('');\r\n        setpesoBasculaValue('');\r\n        setLiquidacionValue('');\r\n    };\r\n\r\n\r\n    const loadData = async (command) => {\r\n        try {\r\n            const requestOptions = {\r\n                method: \"GET\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Authorization: \"Bearer \" + token,\r\n                },\r\n            };\r\n\r\n            const response_project = await fetch(`/api/projects/${\"p11\"}/${command}`, requestOptions);\r\n\r\n            if (!response_project.ok) {\r\n                setErrorMessage(\"Something went wrong. Couldn't load the leads\");\r\n            } else {\r\n                const data_project = await response_project.json();\r\n                console.log(data_project);\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error(\"Error loading data:\", error);\r\n            setErrorMessage(\"Error loading data. Please try again.\");\r\n        } finally {\r\n            setLoading(false); // Marcar la carga como completa\r\n        }\r\n    };\r\n\r\n    const executeproject = async (command, json_file) => {\r\n        const requestOptions = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: \"Bearer \" + token,\r\n            },\r\n        };\r\n        const requestDownload = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: \"Bearer \" + token,\r\n            },\r\n        };\r\n\r\n        const response_json_file = await fetch(`/save_insert/${json_file}/${\"ajustes.json\"}`, requestDownload);\r\n\r\n        const response_project = await fetch(`/api/projects/${\"p11\"}/${command}`, requestOptions);\r\n\r\n\r\n        if (!response_project.ok) {\r\n            setErrorMessage(\"Something went wrong. Couldn't load the leads\");\r\n        } else {\r\n            const data_project = await response_project.json();\r\n            console.log(data_project);\r\n        }\r\n    }\r\n\r\n\r\n    const getUserdata = async () => {\r\n        const requestOptions = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: \"Bearer \" + token,\r\n            },\r\n        };\r\n\r\n        const response = await fetch(\"/api/users/me\", requestOptions)\r\n\r\n        if (!response.ok) {\r\n            setErrorMessage(\"Something went wrong. Couldn't load the leads\");\r\n        } else {\r\n            const data = await response.json();\r\n            setUserName(data.nombre);\r\n            setUserSecondName(data.apellido);\r\n\r\n        }\r\n    }\r\n\r\n\r\n    const convertsionAjustada = (TotalConsumo,PesoBascula,Despachos) =>{\r\n        \r\n        return (((2750 - (parseInt(PesoBascula)*1000 / parseInt(Despachos))) /\r\n        (3500 + (TotalConsumo / PesoBascula))) + (TotalConsumo /PesoBascula)).toFixed(3);\r\n                                            \r\n\r\n    }\r\n\r\n      // Función que maneja el evento 'keydown' para deshabilitar las teclas direccionales\r\n  const handleKeyDownEvent = (event) => {\r\n    const arrowsKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\r\n    if (arrowsKeys.includes(event.key)) {\r\n      event.preventDefault();\r\n    }\r\n  };\r\n    const resetInactivityTimeout = () => {\r\n        if (inactivityTimeoutRef.current) {\r\n            clearTimeout(inactivityTimeoutRef.current);\r\n        }\r\n\r\n        inactivityTimeoutRef.current = setTimeout(() => {\r\n            window.location.reload();\r\n        }, 300000);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getUserdata();\r\n        loadData(\"-r leerGranjas\");\r\n        resetInactivityTimeout();\r\n\r\n        document.addEventListener(\"mousemove\", () => {\r\n            setInactivityTime(0);\r\n            resetInactivityTimeout();\r\n        });\r\n\r\n        const intervalId = setInterval(() => {\r\n            setInactivityTime(prevTime => prevTime + 1000);\r\n        }, 1000);\r\n\r\n        return () => {\r\n            document.removeEventListener(\"mousemove\", resetInactivityTimeout);\r\n            clearInterval(intervalId);\r\n        };\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <>\r\n            <Navbar />\r\n            <div className=\"has-text-centered m-6\">\r\n                <div className=\"has-text-left m-6\">\r\n                    <h1 className=\"title\">{\"Bienvenid@ \" + username + \" \" + secondName + \" - \" + title}</h1>\r\n                </div>\r\n                {token ? (\r\n                    <>\r\n                        <div></div>\r\n                    </>\r\n                ) : <Navigate to='/' />}\r\n                {loading ? (\r\n                    <>\r\n                        <CircularLoading />\r\n                        <p>Cargando datos...</p>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n\r\n                        <div>\r\n                            Tiempo de inactividad: {inactivityTime / 1000} segundos\r\n                        </div>\r\n\r\n                        <ReadGranjas onGranjaSelect={handleGranjaSelect} jsonData={jsonData} />\r\n                        <div>\r\n                            {selectedLotes.length > 0 && (\r\n                                <div>\r\n                                    <div>\r\n                                        <p>Lotes de la granja seleccionada: </p>\r\n                                    </div>\r\n                                    <div>\r\n                                        {selectedLotes.filter((lote) => !selectedLotesList.includes(lote)).map((lote, index) => (\r\n                                            <button key={index} className=\"button is-warning m-2\" onClick={() => handleLoteSelect(lote)}>\r\n                                                <b>{lote}</b>\r\n                                            </button>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                        <div>\r\n                            {selectedLote && selectedLoteData && (\r\n                                <>\r\n                                    <h2>Datos del lote seleccionado: </h2>\r\n                                    <b>\r\n                                        <p>{selectedLoteData.Lote}</p>\r\n                                    </b>\r\n                                    <div className=\"table-container\">\r\n                                        <table className=\"table is-bordered is-striped is-hoverable\">\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <th>Estimado</th>\r\n                                                    <th>Real</th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                <tr>\r\n                                                    <td style={{ textAlign: 'left' }}>\r\n                                                        <strong>Aves Inicial:</strong>\r\n                                                        <span>{selectedLoteData.AvesInicial}</span>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <div className=\"inputGroup\">\r\n                                                            <input\r\n                                                                className=\"input\"\r\n                                                                type=\"Text\"\r\n                                                                placeholder=\"Ingrese ajuste aves\"\r\n                                                                style={{ marginLeft: '10px' }}\r\n                                                                value={avesInicialValue}\r\n                                                                onChange={(e) => {\r\n                                                                    const inputValue = e.target.value;\r\n                                                                    const sanitizedValue = inputValue.replace(/[^0-9]/g, ''); // Acepta solo números enteros positivos\r\n                                                                    setAvesInicialValue(sanitizedValue);\r\n                                                                    setErrorMessage(\"\");\r\n\r\n                                                                    // Validar que el valor sea mayor que cero\r\n                                                                    if (parseInt(inputValue) === 0) {\r\n                                                                        setErrorMessageAvesIniciales(\"Hay valores en cero.\");\r\n                                                                        errorMessageRef.current.show();\r\n\r\n                                                                    }\r\n                                                                    else {\r\n                                                                        setErrorMessageAvesIniciales(\"\")\r\n\r\n                                                                    }\r\n\r\n                                                                }}\r\n                                                            />\r\n                                                            <ErrorMessage ref={errorMessageRef} message={errorMessageAvesIniciales} />\r\n                                                            <label className=\"name\" htmlFor=\"name\" id=\"label-fname\"></label>\r\n                                                        </div>\r\n                                                    </td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <td style={{ textAlign: 'left' }}>\r\n                                                        <strong>TotalConsumo:</strong>\r\n                                                        <span>{selectedLoteData.TotalConsumo}</span>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <div className=\"inputGroup\">\r\n                                                            <input\r\n                                                                className=\"input\"\r\n                                                                type=\"Text\"\r\n                                                                placeholder=\"Ingrese ajuste consumo\"\r\n                                                                style={{ marginLeft: '10px' }}\r\n                                                                value={totalConsumoValue}\r\n                                                                onChange={(e) => {\r\n                                                                    const inputValue = e.target.value;\r\n                                                                    const sanitizedValue = inputValue.replace(/[^0-9]/g, '');\r\n                                                                    setTotalConsumoValue(sanitizedValue);\r\n                                                                    setErrorMessage(\"\");\r\n                                                                    if (parseInt(inputValue) === 0) {\r\n                                                                        setErrorMessageConsumo(\"Hay valores en cero.\");\r\n                                                                        errorMessageRef.current.show();\r\n\r\n                                                                    }\r\n                                                                    else {\r\n                                                                        setErrorMessageConsumo(\"\")\r\n\r\n                                                                    }\r\n\r\n                                                                }}\r\n                                                            />\r\n                                                            <ErrorMessage ref={errorMessageRef} message={errorMessageConsumo} />\r\n                                                            <label className=\"name\" htmlFor=\"name\" id=\"label-fname\"></label>\r\n                                                        </div>\r\n                                                    </td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <td style={{ textAlign: 'left' }}>\r\n                                                        <strong>Muertes:</strong>\r\n                                                        <span>{selectedLoteData.MUERTES}</span>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <div className=\"inputGroup\">\r\n                                                            <input\r\n                                                                className=\"input\"\r\n                                                                type=\"Text\"\r\n                                                                placeholder=\"Ingrese ajuste muertes\"\r\n                                                                style={{ marginLeft: '10px' }}\r\n                                                                value={muertesValue}\r\n                                                                onChange={(e) => {\r\n                                                                    const inputValue = e.target.value;\r\n                                                                    const sanitizedValue = inputValue.replace(/[^0-9]/g, '');\r\n                                                                    setMuertesValue(sanitizedValue);\r\n                                                                    setErrorMessage(\"\");\r\n                                                                }}\r\n                                                            />\r\n                                                            <label htmlFor=\"name\"></label>\r\n                                                        </div>\r\n                                                    </td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <td style={{ textAlign: 'left' }}>\r\n                                                        <strong>Despacho:</strong>\r\n                                                        <span>{selectedLoteData.Despachos}</span>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <div className=\"inputGroup\">\r\n                                                            <input\r\n                                                                className=\"input\"\r\n                                                                type=\"Text\"\r\n                                                                placeholder=\"Ingrese ajuste despachos\"\r\n                                                                style={{ marginLeft: '10px' }}\r\n                                                                value={despachosValue}\r\n                                                                onChange={(e) => {\r\n                                                                    const inputValue = e.target.value;\r\n                                                                    const sanitizedValue = inputValue.replace(/[^0-9]/g, ''); // Acepta solo números enteros positivos\r\n                                                                    setDespachosValue(sanitizedValue);\r\n                                                                    setErrorMessage(\"\");\r\n                                                                    if (parseInt(inputValue) === 0) {\r\n                                                                        setErrorMessageDespacho(\"Hay valores en cero.\");\r\n                                                                        errorMessageRefDespacho.current.show();\r\n\r\n                                                                    }\r\n                                                                    else {\r\n                                                                        setErrorMessageDespacho(\"\")\r\n\r\n                                                                    }\r\n\r\n                                                                }}\r\n                                                               \r\n                                                            />\r\n                                                            <ErrorMessage ref={errorMessageRef} message={errorMessageDespacho} />\r\n                                                            <label htmlFor=\"name\"></label>\r\n                                                        </div>\r\n                                                    </td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <td style={{ textAlign: 'left' }}>\r\n                                                        <strong>Inventario:</strong>\r\n                                                        <span>{selectedLoteData.Inventario}</span>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <div className=\"inputGroup\">\r\n                                                            <input\r\n                                                                className=\"input\"\r\n                                                                type=\"Text\"\r\n                                                                placeholder=\"Ingrese ajuste inventario\"\r\n                                                                style={{ marginLeft: '10px' }}\r\n                                                                value={handleInventarioChange()}\r\n                                                               \r\n\r\n                                                            />\r\n\r\n\r\n                                                            <label htmlFor=\"name\"></label>\r\n\r\n                                                        </div>\r\n                                                    </td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <td style={{ textAlign: 'left' }}>\r\n                                                        <strong>Peso Bascula:</strong>\r\n                                                        <span>{selectedLoteData.PesoBascula}</span>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <div className=\"inputGroup\">\r\n                                                            <input\r\n                                                                className=\"input\"\r\n                                                                type=\"Text\"\r\n                                                                placeholder=\"Ingrese ajuste pesaje\"\r\n                                                                style={{ marginLeft: '10px' }}\r\n                                                                value={pesoBasculaValue}\r\n                                                                onChange={(e) => {\r\n                                                                    const inputValue = e.target.value;\r\n                                                                    const sanitizedValue = inputValue.replace(/[^0-9]/g, '');\r\n                                                                    setpesoBasculaValue(sanitizedValue);\r\n\r\n                                                                    // Validar que el valor sea mayor que cero\r\n                                                                    if (parseInt(inputValue) === 0) {\r\n                                                                        setErrorMessagePesoBascula(\"Hay valores en cero.\");\r\n                                                                        errorMessageRef.current.show();\r\n\r\n                                                                    }\r\n                                                                    else {\r\n                                                                        setErrorMessagePesoBascula(\"\")\r\n\r\n                                                                    }\r\n\r\n                                                                }\r\n                                                                }\r\n                                                            />\r\n                                                            <ErrorMessage ref={errorMessageRef} message={errorMessagePesoBascula} />\r\n                                                            <label htmlFor=\"name\"></label>\r\n                                                        </div>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        </table>\r\n                                    </div>\r\n\r\n\r\n                                </>\r\n\r\n                            )}\r\n                            {selectedLoteData && (\r\n                                <> <ErrorMessage ref={errorMessageRef} message={errorMessage} />\r\n                                    <button className=\"button is-warning\" onClick={handleOpenModal}>\r\n                                        <b>Generar ajuste</b>\r\n                                    </button>\r\n\r\n                                    <div className=\"container mt-3\">\r\n\r\n                                        <ModalDialog\r\n                                            show={showModal}\r\n                                            handleClose={handleCloseModal}\r\n                                            handleSave={handleSaveModal}\r\n                                            conversionReal={(parseFloat(totalConsumoValue) / parseFloat(pesoBasculaValue)).toFixed(3)}\r\n                                            conversionEstimada={(selectedLoteData.TotalConsumo / selectedLoteData.PesoBascula).toFixed(3)}\r\n                                            conversionEstimadaAjustada={convertsionAjustada(selectedLoteData.TotalConsumo ,selectedLoteData.PesoBascula,selectedLoteData.Despachos)}\r\n                                            conversionRealAjustada= {convertsionAjustada(parseFloat(totalConsumoValue) ,parseFloat(pesoBasculaValue),parseFloat(despachosValue))}\r\n                                           \r\n                                        />\r\n                                    </div>\r\n                                </>\r\n                            )}\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BotAgriFerAjuste;\r\n","import React from \"react\";\r\nimport './css/CircularLoading.css'\r\n\r\nfunction CircularLoading() {\r\n  return (\r\n    <div className=\"circle-loading\">\r\n      <div className=\"circle\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CircularLoading;\r\n"],"names":["_ref","onGranjaSelect","jsonData","_useState","useState","_useState2","_slicedToArray","selectedGranja","setSelectedGranja","_useState3","_useState4","uniqueGranjas","setUniqueGranjas","useEffect","granjas","Array","from","Set","map","item","Granja","_jsxs","children","_jsx","htmlFor","className","value","onChange","event","selectedValue","target","granja","index","show","handleClose","handleSave","conversionReal","conversionRealAjustada","conversionEstimada","conversionEstimadaAjustada","Modal","onHide","centered","closeButton","Button","variant","onClick","title","_useContext","useContext","UserContext","_useContext2","token","username","setUserName","secondName","setUserSecondName","_useState5","_useState6","errorMessage","setErrorMessage","_useState7","_useState8","errorMessageDespacho","setErrorMessageDespacho","_useState9","_useState10","errorMessageAvesIniciales","setErrorMessageAvesIniciales","_useState11","_useState12","errorMessageConsumo","setErrorMessageConsumo","_useState13","_useState14","errorMessagePesoBascula","setErrorMessagePesoBascula","_useState15","_useState16","_useState17","_useState18","selectedLotes","setSelectedLotes","_useState19","_useState20","selectedLote","setSelectedLote","_useState21","_useState22","selectedLoteData","setLoteData","_useState23","_useState24","avesInicialValue","setAvesInicialValue","_useState25","_useState26","totalConsumoValue","setTotalConsumoValue","_useState27","_useState28","pesoBasculaValue","setpesoBasculaValue","_useState29","_useState30","muertesValue","setMuertesValue","_useState31","_useState32","despachosValue","setDespachosValue","_useState33","_useState34","liquidacionValue","setLiquidacionValue","_useState35","_useState36","selectedLotesList","setSelectedLotesList","_useState37","_useState38","inactivityTime","setInactivityTime","_useState39","_useState40","loading","setLoading","_useState41","_useState42","showModal","setShowModal","errorMessageRefDespacho","useRef","errorMessageRef","inactivityTimeoutRef","handleInventarioChange","parseFloat","loadData","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","command","requestOptions","response_project","data_project","wrap","_context","prev","next","method","headers","Authorization","fetch","concat","sent","ok","json","console","log","t0","error","finish","stop","_x","apply","arguments","executeproject","_ref3","_callee2","json_file","requestDownload","_context2","_x2","_x3","getUserdata","_ref4","_callee3","response","data","_context3","nombre","apellido","convertsionAjustada","TotalConsumo","PesoBascula","Despachos","parseInt","toFixed","resetInactivityTimeout","current","clearTimeout","setTimeout","window","location","reload","document","addEventListener","intervalId","setInterval","prevTime","removeEventListener","clearInterval","_Fragment","Navbar","Navigate","to","CircularLoading","ReadGranjas","lotes","filter","includes","Lote","length","lote","granjaLote","handleLoteSelect","style","textAlign","AvesInicial","type","placeholder","marginLeft","e","inputValue","sanitizedValue","replace","ErrorMessage","ref","message","id","MUERTES","Inventario","ModalDialog","jsonFinal","Estimado","Muertes","DespachoAves","InventarioAves","Liquidacion","Real","Responsable","JSON","stringify","prevList","_toConsumableArray"],"sourceRoot":""}